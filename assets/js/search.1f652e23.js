(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{285:function(t,e,o){"use strict";o.r(e),e.default=[{title:["笔记"],path:"/posts/4.html",strippedContent:' # CSS   CSS 是 Cascading Style Sheet   层叠样式表  作用: 美化网页 比如 加字体颜色 字体样式 背景图   css的优点   丰富的修饰样式   内容与修饰分离，利于项目开发   实现样式复用，提高开发效率   实现页面的精确控制  ##  CSS基本语法  选择器{   属性1：属性值1;   属性2：属性值2；   属性3：属性值3;   .......  }  添加注释的作用就是为了提高代码的 可读性  ------  ##   样式的三种书写方式  1. 外部引入样式表     ```html    <link rel="stylesheet" href="css文件路径" />    or    <style>        导入 外部样式表    \t@import url("css/index.css");    </style>    ```     1    2    3    4    5    6  2. 内嵌（内部）样式     ```html    <head>    \t<style type="text/css">    \t\t    \t</style>    </head>    ```     1    2    3    4    5  3. 行内样式     ```html    <p style="color: #F00;font-size:40px;">    \t飞雪连天射白鹿,笑书神侠倚碧鸳。    </p>    ```     1    2    3     ###   三种书写方式优先级     行内样式 > 内部 > 外部样式  ##   css选择器  1. 类选择器     ```html    <style>    .abc{    }    </style>        <div class="abc">    \tdiv标签    </div>        有class 那么选择器就要以 . 开头    class 的类名 可以重复使用    ```     1    2    3    4    5    6    7    8    9    10    11  2. ID选择器     ```html    <style>    #abc{    }    </style>        <div id="abc">    \tdiv标签    </div>        有id 那么选择器就要以 # 开头    id的类名 不可以重复使用    ```     1    2    3    4    5    6    7    8    9    10    11  3. 标签选择器     ```css    <style>    div{    }    </style>        <div>    \tdiv标签    </div>        标签是什么名字 那么选择器就要以什么 开头    ```     1    2    3    4    5    6    7    8    9    10     ##   选择器的优先级     ID > Class > Tag（标签）     ------  ##   常用的CSS样式  ###  字体  | 样式名      | 值                                | 备注           | | ----------- | --------------------------------- | -------------- | | font-size   | 数字（单位px）                    | 设置字体大小   | | font-family | 字符串 字体（当前计算机要有字体） | 设置字体的类型 | | color       | 单词/16进制/rgb                   | 设置字体的颜色 | | font-weight | 100-900 / bold                    | 设置字体的粗细 |  ###   文本  |     样式名      |                   值                    |                        备注                        | | :-------------: | :-------------------------------------: | :------------------------------------------------: | |   line-height   |                  数字                   | 设置行与行之间的距离(通常搭配height是文字垂直居中) | |   text-align    |           left、center、right           |                 设置文本的对齐方式                 | | letter-spacing  |              数字(单位px)               |              设置字体与字体之间的填充              | | text-decoration | line-through、underline、overline、none |                设置字体的线如何显示                |  ##  盒子模型  什么是盒子模型？  所有标签都是盒子  一个盒子的宽度 = 内容 + 外边距 + 边框线 + 内边距  盒子的宽度 = 内容 + padding-left +   brorder-left + margin-left +   padding-right + border-right +   margin-right;  ##   边框样式  ###   border  ```html <style>     div{         /* 第一种写法 */         border:1px solid red;                  /* 第二种写法 */         border-width:2px;         border-color:red;         border-style:solid;                  /*第三种写法*/         border-top:2px solid red;              } </style>  <div>     border </div> ```  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  ###   border-radius  ```html <style>     div{         border-radius:10px;                  border-top-left-radius: 50px;         border-bottom-right-radius: 50px;     } </style> <div></div> ```  1 2 3 4 5 6 7 8 9 10  ###   边框线和边框圆角应用场景  1. 按钮 2. 气泡效果（圆角+定位）  ##   列表样式  | list-style-type     | 列表类型       | | ------------------- | -------------- | | list-style-image    | 列表的图片     | | list-style-position | 列表的位置     | | list-style          | 列表类型的简写 |  ###   使用场景  1. 导航栏  ##  背景和阴影  | background-color    | **用于设置元素的背景颜色**       | | ------------------- | -------------------------------- | | background-image    | 用于设置元素的背景图片           | | background-repeat   | 用于设置元素的背景图片重复方式   | | background-position | 用于设置元素的背景图片位置       | | background-size     | 用于设置元素的背景图片大小       | | background          | 复合属性，用于设置元素的背景效果 |  ####  渐变  #####   线性渐变  #####  经性渐变  #####   重复性渐变  ------  ####   阴影  #####  文本阴影  text-shadow: 上下，左右，模糊度，颜色  #####   盒子阴影  box-shadow:上下，左右，模糊度，颜色  隐藏页面元素的方式  3种  1. overflow:hidden 超出 溢出 不占位置 2. display:none 显示方式不显示 不占位置 3. visibility: hidden 透明度 占位置'},{title:["函数"],path:"/posts/2.html",strippedContent:' ---  ## 1.什么是函数  函数（function），也可以被称之为方法（method），或者过程（procedure）是一段预定义好，并可以被反复使用的代码块。其中可以包含多条可执行语句  预定义好：事先声明好，但不被执行  #### 反复使用：允许被多个地方（元素，函数中）所应用  #### 代码块：允许包含多条可执行的代码  函数本质是功能完整的对象  ---  ## 2.函数的声明  ### 语法：  ``` javascript function 函数名（）{ 可执行语句； } ```  ex：创建一个函数 名称：say hello，主体功能为，向控制台上 输出一句 Hello World  ```js function printHello(){          console.log("hello");          console.log("world");          } ```  ## 3.函数的调用  执行函数中的内容  任何js的合法位置处，都允许调用函数  违法：函数名称（）：  ```js function sayHello(){          console.log("hello");          console.log("world"); } ```  ``` sayHello(); ```  ## 4.定义函数的参数和返回值  ### 转换函数  parseInt（数据）；//将指定数据转换为 整数  parseFlost（数据）；//将指定的数据转换为 小数  console.log("要打印的话")；  ### 1，定义带参函数  ### 2，带返回值的函数  ---  ## 4.1、定义带参函数  function 函数名（参数列表声明）【  ​      //代码块（函数体，功能体，方法体）  】  #### 参数列表：由一或多个变量名称来组成  声明函数时的定义参数，可以称之为叫做“形参”（形式参数）  ex：  ```js function printlnfo(userName,ueserPwd){    console.log(\'用户名；\'+userName +\'密码:\'+userPwd); } ```  ```js printlnfo(Tom\',\'\'123\');       传递直接量做实参  ```  在调用函数时所传递的参数值，被称之为“实参”（实际参数）  ## 4.2，带返回值的函数  ### 1声明  function 函数名（0或多个参数）{  ​           //代码块；  ​        return 值；    }  ### 2调用     var 变量=函数名（参数）；  ```js function add(num1,num2){          return num1+num2; } ```  ```js var result=add(10,20); console.log(result);         //输出30 ```  ## 5.1、什么是作用域  作用域就是变量或函数的可访问范围。他控制着变量或函数的可见性和生命周期  在js中，变量或函数的作用域可分为：  ### 1、函数的作用域，只在当前函数内可访问  ### 2全局作用域，一经定义，代码的任何位置都可以方式  ## 5.1、函数作用域中的变量  函数作用域中的变量（局部变量）只在当前函数内可访问到，  离开此范围就无法访问了。  ```js function add(){      var sum=1=2;          //局部变量      console.log(sum);     //正确 } console.log(sum);          //脚本错误 ```    ## 5.2、全局作用域中的变量  全局作用域中的变量，称之为“全局变量”，在代码的任何位置处都能访问  ```js var sum=0;                   //全局变量 function add(){      sum =1+2;      console.log(sum);       //正确 } console.log(sum);            //正确 ```  ```js function add(){      sum=1+2;                //全局变量 } add();                       //必须调用一次 console.log(sum);            //正确 ```  ## 5.3、声明提前  js在正式执行之前，会将所有var声明的变量和function声明的函数，预读到所在作用域的顶部  但是，对变量的赋值，还保留在原来的位置处  ```js console.log(a);//不会出错，输出undefined var a=100; console.log(a);//100; ```  ```js var a;//仅声明提前 console.log(a);//undefined a=100;//赋值仍保留在原位置 console.log;//100 ```  ## 5.4、按值传递  传参时，实际上是将 实参 复制了一份副本传给了函数。在函数体内 对变量进行修改，实际上是不会影响到外部的实参变量的  ```js var n=100;//全局变量n function fun(n){//参数变量也是局部变量    n-=3;//修改的是局部变量n    console.log(n);//输出的是局部变量n } fun(n);//按值传递，方法内输出97； console.log(n);//输出全局变量的值：100 ```  '},{title:["笔记"],path:"/posts/3.html",strippedContent:' # 标题标签    > 块级标签 > > 会自动换行的叫做块级标签 > > 行级标签 > > 在同一行显示的叫做行级标签  ------  ### 标题标签  ```html <h1>标题</h1> <h2>标题</h2> <h3>标题</h3> <h4>标题</h4> <h5>标题</h5> <h6 align="center">标题</h6> ```  1 2 3 4 5 6  | 属性名 |         值          |   备注   | | :----: | :-----------------: | :------: | | align  | left、center、right | 对齐方式 |  ------  ### 段落标签  ```html <p align="center"> \t举头望明月，低头思故乡。 </p> <p align="right"> 举头望明月，低头思故乡。 </p> ```  1 2 3 4 5 6  | 属性名 |         值          |   备注   | | :----: | :-----------------: | :------: | | align  | left、center、right | 对齐方式 |  ------  ### 水平线标签  ```html <hr /> ```  1  | 属性名  |   值    |   备注   | | :-----: | :-----: | :------: | |  width  |  数字   | 线的宽度 | | height  |  数字   | 线的高度 | |  color  | 字符串  |   颜色   | | noshade | noshade | 取消阴影 |  ------  ### 超链接标签  ```html <a href="地址">超链接</a> ```  1  |  属性  |      值       |      备注      | | :----: | :-----------: | :------------: | |  href  | 网址/本地路径 |    跳转地址    | | target |    _blank     | 新窗口打开页面 |  ------  ###  图片标签  ```html <img src="路径" alt="文字" /> ```  1  |  属性  |                    值                    |            备注            | | :----: | :--------------------------------------: | :------------------------: | |  src   |            网络地址/本地路径             |          图片地址          | |  alt   |                  字符串                  | 图片无法显示时，提示的文字 | | title  |                  字符串                  |   鼠标停留时,提示的文字    | | border |                   数字                   |           边框线           | | align  | top、left、right、center、middle、bottom | 图文混排时 图文的显示方式  |  ------  ###  列表标签  ####  无序列表  ul 无序列表标签  li 列表项  ```html <ul type="square"> \t<li>无序列表</li> \t<li>无序列表</li> \t<li>无序列表</li> </ul> ```  1 2 3 4 5  | 属性名 |             值             |   备注   | | :----: | :------------------------: | :------: | |  type  | disc(默认)、square、circle | 列表类型 |  ------  ####  有序列表  ol 有序列表标签  li 列表项  ```html <ol type="a"> \t<li>有序列表</li> \t<li>有序列表</li> \t<li>有序列表</li> </ol> ```  1 2 3 4 5  | 属性名 |         值          |     备注     | | :----: | :-----------------: | :----------: | |  type  | 1(默认)、A、a、i、I | 列表符号类型 |  ####   自定义列表(描述)  dl 自定义列表  dt 自定义列表的标题  dd 列表项  ```html <dl> \t<dt>自定义标题</dt> \t<dd>自定义列表</dd> \t<dd>自定义列表</dd> </dl> ```  1 2 3 4 5  ####  列表使用场景  1. 导航栏 2. 网页布局 3. 轮播图 4. 标签页  ------  ###   div 和 span 标签  ####   div   块级元素  ####   span   行级元素  ------  ###   表格标签  ####   规则表格  thead 表头 一般不写  tbody 表体 一般不写 但是浏览器会自动生成  tfoot 表尾 一般不写  caption 表格的标题  table 表格  tr 行  td 列  th 是表头 仅限于在表格的第一行 有字体加粗 水平居中效果  ```html <table         width="100%"         cellspacing="0"         cellpadding="0"         border="1"         bgcolor="#F0F"        background="图片路径"        > \t<caption>标题</caption>     <thead>     \t<tr>     \t\t<th>表头单元格1</th>         \t<th>表头单元格2</th>    \t\t</tr>     </thead>     <tbody>     \t<tr>         \t<td>单元格1</td>             <td>单元格2</td>         </tr>     </tbody>     <tfoot>     \t<tr>         \t<td>单元格1</td>             <td>单元格2</td>         </tr>     </tfoot> </table> ```  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  |   属性名    |         值          |                备注                | | :---------: | :-----------------: | :--------------------------------: | |    width    |     数字/百分比     |           设置表格的宽度           | |   height    |        数字         |           设置表格的高度           | |   border    |        数字         |           设置表格的边框           | | cellspacing |        数字         | 设置单元格与单元格之间的间隙(填充) | | cellpadding |        数字         | 设置单元格与单元格内容的间隙(填充) | |   bgcolor   |        颜色         |           设置表格背景色           | | background  |        路径         |           设置表格背景图           | |    align    | left、center、right |        设置表格水平对齐方式        | |   valign    | top、middle、bottom |        设置表格垂直对齐方式        |  ####  不规则表格   要合并的 td 在同一个tr中 叫 列合并 （colspan）   要合并的 td 不在同一个tr中叫行合并 （rowspan）  ####   表格使用场景  1. 网页布局(老项目) 2. 展示数据  ####  练习题  1. 使用规则表格制作班级信息统计表 2. 使用不规则表格制作个人简历  ###  form表单  ####   什么是表单  比如 去银行办理业务需要填写表格  表单就是为了收集用户的信息  ```html 属性 : action : 数据要提交的页面 method：数据提交的方式  默认是 get get 和 post 有什么区别? get 是不安全的 提交的数据量小  post 安全的 数据量没有限制的 ```  1 2 3 4 5 6  ####   input标签  ```html \x3c!-- 所有内容都必须在 form 标签内 --\x3e <form>  \t<input type="password" name="password" placeholder="提示信息" required /> \t<input type="number" name="age" placeholder="年龄" min="0" max="100" step="1" /> </form> ```  1 2 3 4 5  oninvalid="setCustomValidity(\' 内容不符合时 提示的信息 \')" oninput="setCustomValidity(\'\')"  |    属性     |    值    |                  备注                  | | :---------: | :------: | :------------------------------------: | | placeholder |  字符串  |                提示信息                | |    type     |   text   |                 文本框                 | |    type     | password |               密码输入框               | |    type     |  radio   |        单选按钮(name取值要一致)        | |    type     | checkbox |                 复选框                 | |    type     |  submit  |                提交按钮                | |    type     |  reset   |                重置按钮                | |    type     |  button  |                普通按钮                | |    type     |  image   |         (src="路径") 图片按钮          | |    type     |   file   |                 文件域                 | |    type     |  range   |                 滑动块                 | |    type     |   date   |                日期时间                | |    type     |  email   |                邮箱验证                | |    type     |   url    |                网址验证                | |    type     |  number  |                验证数字                | |   checked   | checked  |     默认被选中（单选和复选有作用）     | |  maxlength  |   数字   |                最大长度                | |    size     |   数字   |              输入框的大小              | |  readonly   | readonly | 只读模式（可以获得焦点，数据可以提交） | |  disabled   | disabled | 禁用模式（不能获得焦点，数据无法提交） | |    value    |  字符串  |            给input设置内容             | |  required   | required |                 必填项                 | |     max     |   数字   |              最大取值范围              | |     min     |   数字   |                最小范围                | |    step     |   数字   |        步长 （加 或 减的数字）         |  ####   下拉框（下拉菜单）  ```html <select name="mySelect" multiple> \t<option value="选项1">选项1</option> \t<option value="选项2">选项2</option> </select> ```  1 2 3 4  |   属性   |    值    |    备注    | | :------: | :------: | :--------: | | multiple | multiple |  实现多选  | |  value   |  字符串  | 实际选项值 | | selected | selected |   默认值   |  ####   多行文本输入框  ```html <textarea cols="5" rows="5"></textarea> ```  1  | 属性  |   值   |        备注        | | :---: | :----: | :----------------: | | cols  |  数字  | 设置多行文本框的列 | | rows  |  数字  | 设置多行文本框的行 | | value | 字符串 |    多行文本框的    |  ------  ###   frameset框架  ```html <frameset cols="30%,*"> \t<frame /> \t<frame /> </frameset> ```  1 2 3 4  | 属性        | 值       | 备注               | | ----------- | -------- | ------------------ | | cols        | 百分比   | 设置有几列         | | rows        | 百分比   | 设置有几行         | | frameborder | 数字     | 设置边框线         | | noresize    | noresize | 是否可以拖动边框线 |'},{title:"【实训笔记】",path:"/posts/1.html",strippedContent:" 1,npm run build (打包)     2, 进入 dist 目录    git bash here    git init （初始化）有一个文件生成  .git  git status (检查有哪些文件改动 或 新增）      git add .（放入 缓存区）    git commit -m’备注’   （提交到版本库）    git push -f你的github地址 master  "},{title:"【实训笔记】",path:"/posts/5.html",strippedContent:' ---  # javascript中this的指向  #####   > 首先必须要说的是，this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象（这句话有些问题，后面会解释为什么会有问题，虽然网上大部分的文章都是这样说的，虽然在很多情况下那样去理解不会出什么问题，但是实际上那样理解是不准确的，所以在你理解this的时候会有种琢磨不透的感觉），那么接下来我会深入的探讨这个问题。  例子1：  ```javascript function a(){         \tvar user = "liujiaozhu";     \tconsole.log(this.user);//undefined      console.log(this);//Window   } a(); ```     按照我们上面说的this最终指向的是调用它的对象，这里的函数a实际是被Window对象所点出来的，下面的代码就可以证明。  ```javascript function a(){         \tvar user = "liujiaozhu";     \tconsole.log(this.user); //undefined        console.log(this);//Window } window.a(); ```   其实 alert 也是 window 的一个属性，也是window点出来的。  例子2：  ```javascript var obj = {     \tuser:"liujiaozhu",     \tfn:function(){         \t\tconsole.log(this.user);           \t\t//liujiaozhu          \t \t} } obj.fn(); ```     > 这里的this指向的是对象obj，因为你调用这个fn是通过obj.fn()执行的，那自然指向就是对象obj，这里再次强调一点，this的指向在函数创建的时候是决定不了的，在调用的时候才能决定，谁调用的就指向谁，一定要搞清楚这个。  其实例子1和例子2说的并不够准确，下面这个例子就可以推翻上面的理论。  如果要彻底的搞懂this必须看接下来的几个例子  例子3：  ```javascript var obj = {     \tuser:"liujiaozhu",     \tfn:function(){         \t\tconsole.log(this.user);          \t\t//liujiaozhu          \t \t} } window.obj.fn(); ```  1 2 3 4 5 6 7 8  > 这段代码和上面的那段代码几乎是一样的，但是这里的this为什么不是指向window，如果按照上面的理论，最终this指向的是调用它的对象，这里先说个而外话，window 是 js 中的全局对象，我们创建的变量实际上是给window添加属性，所以这里可以用 window.obj 对象。 > > 这里先不解释为什么上面的那段代码 this 为什么没有指向 window，我们再来看一段代码。  ```javascript var obj = {     \ta:100,     \tb:{                 a:24,                 fn:function(){                         console.log(this.a);                          //24                      }     \t} } obj.b.fn(); ```     > 这里同样也是对象obj 点出来的，但是同样this并没有执行它，那你肯定会说我一开始说的那些不就都是错误的吗？其实也不是，只是一开始说的不准确，接下来我将补充一句话，我相信你就可以彻底的理解this的指向的问题。 > > 情况1：如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，这里需要说明的是在js的严格版中this指向的不是window，但是我们这里不探讨严格版的问题，你想了解可以自行上网查找。 > > 情况2：如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。 > > 情况3：如果一个函数中有this，这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象，例子3可以证明，如果不相信，那么接下来我们继续看几个例子。  ```javascript var obj = {     \ta:100,     \tb:{                        \t\tfn:function(){             \t\t\tconsole.log(this.a);              \t\t\t//undefined                 \t\t}     \t} } obj.b.fn(); ```  1 2 3 4 5 6 7 8 9 10  尽管对象b中没有属性a，这个this指向的也是对象b，因为this只会指向它的上一级对象，不管这个对象中有没有this要的东西。  还有一种比较特殊的情况，  例子4：  ```javascript var obj = {     \ta:100,     \tb:{                 a:24,                 fn:function(){                         console.log(this.a); //undefined              console.log(this); //window                 }          }  } var j = obj.b.fn; j(); ```  >  这里this指向的是window，是不是有些蒙了？其实是因为你没有理解一句话，这句话同样至关重要。 > > this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的，例子4中虽然函数fn是被对象b所引用，但是在将fn赋值给变量 j 的时候并没有执行所以最终指向的是window，这和例子3是不一样的，例子3是直接执行了fn。 > > this讲来讲去其实就是那么一回事，只不过在不同的情况下指向的会有些不同，上面的总结每个地方都有些小错误，也不能说是错误，而是在不同环境下情况就会有不同，所以我也没有办法一次解释清楚，只能你慢慢地的去体会。  构造函数版this：  ```javascript function Fn(){         \tthis.user = "liujiaozhu"; } var a = new Fn(); console.log(a.user); //liujiaozhu ```     > 这里之所以对象a可以点出函数Fn里面的user是因为new关键字可以改变this的指向，将这个this指向对象a，为什么我说a是对象，因为用了new关键字就是创建一个对象实例，理解这句话可以想想我们的例子3，我们这里用变量a创建了一个Fn的实例（相当于复制了一份Fn到对象a里面），此时仅仅只是创建，并没有执行，而调用这个函数Fn的是对象a，那么this指向的自然是对象a，那么为什么对象a中会有user，因为你已经复制了一份Fn函数到对象a中，用了new关键字就等同于复制了一份。'}]}}]);